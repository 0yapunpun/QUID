const controller = {};
const _ = require('underscore');
const productsController = require('../controller/productsController.js');
const userController = require('../controller/usersController.js');
const service = require('../engine/apiService.js');
const helpers = require('../engine/helpers.js');
const moment = require('moment');

controller.autoLogin = async(req, res, next) => {
    const token = req.params.token;
	if (token.indexOf("hHjIlL") == 0) {
        const cardCode = Buffer.from(token.substr(6), 'base64').toString('ascii');
        const resp = await userController.login({"input": cardCode, "pass": "71372770"});
        if (resp.result=='ok') {
            req.session.login = true;
            req.session.documento = resp.user.documento;
            req.session.nombre = resp.user.nombre;
            req.session.programa = resp.user.programa;
            req.session.mail = resp.user.mail;
            req.session.celular = resp.user.celular;
            delete resp.user;
            return res.redirect('/');
        }
        if (resp.result=='valida') return res.redirect(`/login?e=valida&t=${resp.mail}`);
        return res.redirect(`/login?e=err`);
        
    }
    return res.redirect('/login?e=err');
}

controller.index = async(req, res, next) => {
    // Validar login
    if (!req.session.login) { res.redirect('/login'); return; }

    // Obtener puntos clientes
    const points = await getPoints(req.session.documento);
    const prods = await productsController.findStarred();

    var counters = {'Distribuidor': 0, 'GranDistribuidor': 0, 'VendedorMostrador': 0};
    const {err, data: totalRegistered} = await service.totalRegistered();
    if (!err) _.each(totalRegistered, r => { counters[r[0].split(' ').join('')] = r[1]});
    
    res.render('index', {'session': req.session, 'points': points, 'counters': counters, 'products': prods});
}

controller.catalog = async(req, res, next) => {
    // Validar login
    if (!req.session.login) { res.redirect('/login'); return; }

    // Obtener puntos clientes
    const points = await getPoints(req.session.documento);

    if (req.method == 'POST') {
        req.body.programa = req.session.programa;
        var products = await productsController.findBy(req.body);
        products[0] = _.map(products[0], p => { 
            p.token = "pR==lcALi"+Buffer.from(JSON.stringify({'id': p.id, 'price': p.price})).toString('base64');
            return p;
        })
        res.send(products);
        return;
    }
    res.render('catalog', {'session': req.session, 'points': points, 'products': [[],[],[],[]]});
}

controller.login = async(req, res, next) => {
    res.render('login', {'user_id': 0});
}

controller.getDataTokenPassword = async(token) => {
    var buff = Buffer.from(token, 'base64').toString('ascii');
	if (buff.indexOf("Q?==") == 0) {
		buff = buff.substr(4);
		var params = Buffer.from(buff, 'base64').toString('ascii');
		params = params.split("==");
		if (params.length > 0) {
			var id = parseInt(params[0].replace( /^\D+/g, ''));
			var diffDate = moment().diff(moment(params[1], "YYYYMMDDHHmm"), 'hours');
			if (diffDate < 4) {
                if (userController.verifyUserById(id)) return id;
			}	
		} 
	}
    return -1;
}

controller.loginValidate = async(req, res, next) => {
    const resp = await userController.login(req.body);
    if (resp.result=='ok') {
        req.session.login = true;
        req.session.documento = resp.user.documento;
        req.session.nombre = resp.user.nombre;
        req.session.programa = resp.user.programa;
        req.session.mail = resp.user.mail;
        req.session.celular = resp.user.celular;
        delete resp.user;
    }
    return res.send(resp);
}

controller.logout = (req, res) => {
	req.session.destroy((err) => {
        if(err) return console.error(err);
        res.redirect('/login'); return;
    });
}

controller.pointsHistory = async(req, res, next) => {
    // Validar login
    if (!req.session.login) { res.redirect('/login'); return; }

    // Obtener puntos clientes
    const points = await getPoints(req.session.documento);

    // Historia de puntos cliente
    const {err: errPH, data: _pointsHistory} = await service.pointsHistory(req.session.documento);
    var pointsHistory = [];
    if (errPH) helpers.showLog('OBTENER HISTORIAL PUNTOS', errPH);
    if (_pointsHistory.code>-1) pointsHistory = _pointsHistory.content;

    res.render('pointsHistory', {'session': req.session, 'points': points, 'pointsHistory': pointsHistory});
}

controller.getPointsHistory = async(req, res, next) => {
    const doc = req.body.doc;
    // Obtener puntos clientes
    const points = await getPoints(doc);

    // Historia de puntos cliente
    const {err: errPH, data: _pointsHistory} = await service.pointsHistory(doc);
    var pointsHistory = [];
    if (errPH) helpers.showLog('OBTENER HISTORIAL PUNTOS', errPH);
    if (_pointsHistory.code>-1) pointsHistory = _pointsHistory.content;
    res.send({'points': points, 'pointsHistory': pointsHistory})
}

controller.recoveryPassword = async(req, res, next) => {
    let token = req.params.token;
	const id = await controller.getDataTokenPassword(token);
    res.render('login', {'user_id': id});
}

controller.redeemPending = async(req, res, next) => {
    const list = await productsController.redeemPending();
    for (const r of list) {
        
        const ob = (r.observacion) ? r.observacion : '';
        const inputService = {"documento": r.documento, "fecha": r.date, "puntos": r.amount*r.price, "concepto": r.itemCode, "comprobante": r.id+r.documento, "descripcion": ob};
        const rService = await service.pointsRedeem(inputService);
        let input = {'id': r.id, 'erp': 1, 'resp_erp': JSON.stringify(rService)};
        const success = await productsController.redeemUpdate(input);
    }
    res.send(list);
}

controller.sellers = async(req, res, next) => {
    // Validar login
    if (!req.session.login) { res.redirect('/login'); return; }

    // Obtener puntos clientes
    const points = await getPoints(req.session.documento);

    // Listado de vendedores mostrador
    const {err: errS, data: _sellers} = await service.sellers(req.session.documento);
    var sellers = [];
    if (errS) helpers.showLog('OBTENER LISTADO VENDEDORES', errS);
    if (_sellers.length>0) sellers = _sellers[0].vendedoresMostrador;

    // Cargar maestros
    const {err: eDpto, data: _dptos} = await service.states();
    const {err: eCiu, data: _ciudades} = await service.cities();
    
    if (eDpto) helpers.showLog('OBTENER LISTADO DEPARTAMENTOS', eDpto);
    if (eCiu) helpers.showLog('OBTENER LISTADO CIUDADES', eCiu);

    var dptos = [], ciudades = [];
    if (_dptos.length>0) dptos = _dptos;
    if (_ciudades.length>0) ciudades = _ciudades;

    res.render('sellers', {'session': req.session, 'points': points, 'sellers': sellers, 'dptos': dptos, 'ciudades': ciudades});
}

controller.sendContact = async(req, res, next) => {
    const to = 'loscalidosos@igbcolombia.com';
    const nombre = req.body.nombre;
    const email = req.body.email;
    const mensaje = req.body.mensaje;

    let html = `<html>
        <head></head>
        <body>
            <div style="width: 600px;font-family: Arial, Helvetica, sans-serif;text-align: center;margin: 0 auto;">
                <div style="width: 100%; text-align: center;border-bottom: 1px solid #CCC;">
                    <img src="https://loscalidosos.com/images/logo.png" style="width: 50%;">
                </div>
                <h3 style="color: #424242;">Hola!,</h3>
                <p style="color: #424242;">Hemos recibido una solicitud de contacto a través se la página web.<br><b>Nombre: </b>${nombre}<br><b>Email: </b>${email}<br><b>Mensaje: </b>${mensaje}</p>
                <br>
            </div>    
        </body>
    </html>`;
    const optionsMail = {
        'to': to,
        'subject': 'SOLICITUD DE CONTACTO - LOS CALIDOSOS',
        'html': html
    }
    const {err: errMail, result: resultMail} = await helpers.sendMail(optionsMail);
    res.send({'ok': 1});
}

controller.sendSeller = async(req, res, next) => {
    const rService = await service.sendSeller(req.body);
    res.send(rService);
}

controller.sendForgotPassword = async(req, res, next) => {
    var user = await userController.findByEmail(req.body.email);
    if (user.err) return res.send(user);
    user = user.result;
    let id = user.id;
    let email = user.mail;
    let date = moment().format('YYYYMMDDHHmm');
    var token = Buffer.from("?"+id+"=="+date).toString('base64');
        token = Buffer.from("Q?=="+token).toString('base64');

    let url = "https://loscalidosos.com/login/recovery-password/"+token;
    let html = `<html>
            <head></head>
            <body>
                <div style="width: 600px;font-family: Arial, Helvetica, sans-serif;text-align: center;margin: 0 auto;">
                    <div style="width: 100%; text-align: center;border-bottom: 1px solid #CCC;">
                        <img src="https://loscalidosos.com/images/logo.png" style="width: 50%;">
                    </div>
                    <h3 style="color: #424242;">Hola!, ¿Olvidaste tu contraseña?</h3>
                    <p style="color: #424242;">Sigue este enlace para restablecer la contraseña de tu cuenta en <a href="https://loscalidosos.com" style="color: #da0008;">Los Calidosos</a>. Si no solicitaste una nueva contraseña, puedes borrar este correo electrónico de manera segura. <b>NOTA: </b>El enlace enviado solo será válido 4 horas.</p>
                    <br>
                    <a href="${url}" style="background: #e51a23;padding: 15px 20px;border-radius: 6px;color: #fff;text-decoration: none;">Restablecer Contraseña</a>
                </div>    
            </body>
        </html>`;

    const optionsMail = {
        'to': email,
        'subject': 'REESTABLECER CONTRASEÑA - LOS CALIDOSOS',
        'html': html
    }
    const {err: errMail, result: resultMail} = await helpers.sendMail(optionsMail);
    res.send({'ok': 1});
}

controller.sendMail = async(req, res, next) => {
    const html = '<html> <body style="margin: 0;padding: 0;font-family: Arial, Helvetica, sans-serif;"> <div style="width: 600px"> <img src="https://loscalidosos.com/images/mail/top-correo.jpg" style="width: 100%;"> <img src="http://wali.igbcolombia.com:8080/shared/images/calidosos/ALKOSTO2.jpg" style=" width: 300px; margin: 0 auto; display: block; "> <table style="width: 100%;padding: 50px 20px;"> <td style="text-align: center;"> <p><b>MUNDO MOTOS EL CARMEN Y/O CORREA</b><br>NIT 12348484</p> </td> <td style="text-align: center;"> <p><b>ALKOSTO BONO $ 100.000</b><br>BONO Válido únicamente en los puntos Alkosto y Ktronix. Válido únicamente por el valor que aparece en el bono. Redención válida una sola vez. Prohibida su venta o canje por dinero</p> </td> </table> <h6 style=" margin: 0; font-size: 10px; text-align: center; ">TÉRMINOS Y CONDICIONES</h6> <p style="text-align: justify;padding: 0 20px;font-size: 9px;">Recibe únicamente lo descrito en el bono. No acumulable con otras promociones. Indispensable, mencionar y entregar el bono al momento de hacer el pedido. El bono no es canjeable por efectivo. Se redimen máximos dos bonos por factura. Aplica para comedor y domicilio. Entrega sujeta a cobertura y pedido mínimo. A domicilio con recargo. Sólo aplica en puntos de venta autorizados. Imágenes de referencia. Válido hasta el 31 de diciembre de 2021. Para mayor información consulta a tu asesor o visita www.loscalidosos.com</p> <img src="https://loscalidosos.com/images/mail/foot-correo.png" style="width: 100%;"> </div> </body> </html>';
    const optionsMail = { 
        'to': 'satire.8@gmail.com',
        'subject': 'REDENCIÓN DE PRODUCTOS LOS CALIDOSOS',
        'html': html
    }
    const {err: errMail, result: resultMail} = await helpers.sendMail(optionsMail);
    console.log(resultMail);
    res.send({'ok': 1})
}

controller.sendOrder = async(req, res, next) => {
    if (!req.session.login) { return res.send({'err': 'session'}); }

    // Obtener puntos clientes
    const points = await getPoints(req.session.documento);

    const cart = req.body.cart;
    const validate = _.map(cart, (c) => { 
        if (c.itemCode == 'ABONO') return true;
        if (!c.token) return res.send({'err': 'token'});
        const token = Buffer.from(String(c.token).substr(9), 'base64').toString('ascii');
        return JSON.parse(token).price == c.price;
    })

    if (!_.contains(validate, false)) {
        const totalPoints = _.reduce(_.map(cart, c => c.price*c.cant), (t,i) => {return t+i}, 0);

        if(points>totalPoints) {
            // Funcion guardar
            const input = _.map(cart, (c) => { var ob = (c.observacion) ? c.observacion : ''; return `('${req.session.documento}', '${req.session.nombre}', '${req.session.programa}', '${req.session.mail}', '${c.itemCode}', '${c.itemName}', '${c.urlPhoto}', '${c.condiction}', '${c.description}', ${c.price}, ${c.cant}, '${ob}')`; }).join(',');
            const rInsert = await productsController.redeem(input);

            if (!rInsert) return res.send({'err': 'Un error ha ocurrido, intenta nuevamente'});

            const list = await productsController.redeemPending();
            for (const r of list) {
                
                var ob = (r.observacion) ? r.observacion : '';
                const inputService = {"documento": r.documento, "fecha": r.date, "puntos": r.amount*r.price, "concepto": r.itemCode, "comprobante": r.id+r.documento, "descripcion": ob};
                const rService = await service.pointsRedeem(inputService);
                var inputUpdate = {'id': r.id, 'erp': 1, 'resp_erp': JSON.stringify(rService)};
                const respUpdate = await productsController.redeemUpdate(inputUpdate);
            }
            // const inputService = _.map(cart, (c) => { var ob = (c.observacion) ? c.observacion : ''; return { "documento": req.session.documento, "fecha": moment().format('YYYY-MM-DD'), "puntos": c.cant*c.price, "concepto": c.itemCode, "comprobante": moment().format('YYYYMMDDhhmmss')+req.session.documento, "descripcion": ob }});

            // for (const r of inputService) {
            //     const rService = await service.pointsRedeem(r);
            //     let up = {'id': r.id, 'erp': 1, 'resp_erp': JSON.stringify(rService)};
            //     await productsController.redeemUpdate(up);
            //     helpers.showLog('REDIMIR PUNTOS: ', JSON.stringify(r));
            //     helpers.showLog('REDIMIR RESPUETA: ',JSON.stringify(rService));
            // }
            // const rService = await service.pointsRedeem(inputService);
            // console.log(rService);
 
            // const html = `<html><body style="margin: 0;padding: 0;font-family: Arial, Helvetica, sans-serif;">
            //     <div style="width: 600px">
            //         <img src="https://loscalidosos.com/images/mail/top-correo.jpg" style="width: 100%;">
            //         <img src="${cart[0].urlPhoto}" style=" width: 300px; margin: 0 auto; display: block; ">
            //         <table style="width: 100%;padding: 50px 20px;">
            //             <td style="text-align: center;">
            //                 <p><b>${req.session.nombre}</b><br>NIT ${req.session.documento}</p>
            //             </td>
            //             <td style="text-align: center;">
            //                 <p><b>${cart[0].itemName}</b><br>${cart[0].description}</p>
            //             </td>
            //         </table>
            //         <h6 style=" margin: 0; font-size: 10px; text-align: center; ">TÉRMINOS Y CONDICIONES</h6>
            //         <p style="text-align: justify;padding: 0 20px;font-size: 9px;">${cart[0].condiction}</p>
            //         <img src="https://loscalidosos.com/images/mail/foot-correo.png" style="width: 100%;">
            //     </div>
            // </body></html>`;
            // const optionsMail = { 
            //     'to': 'mercadeo@igbcolombia.com',
            //     'subject': 'REDENCIÓN DE PRODUCTOS LOS CALIDOSOS',
            //     'html': html
            // }
            // const {err: errMail, result: resultMail} = await helpers.sendMail(optionsMail);
            // console.log(resultMail);

            return res.send({'ok': rInsert});
        }

        return res.send({'err': 'puntos'});
        
    }
    res.send({'err': 'token'});
    
}

controller.shoppingCart = async(req, res, next) => {
    // Validar login
    if (!req.session.login) { res.redirect('/login'); return; }

    // Obtener puntos clientes
    const points = await getPoints(req.session.documento);

    res.render('shoppingCart', {'session': req.session, 'points': points});
}

controller.syncProducts = async(req, res, next) => {
    const result = await productsController.sync();
    res.send(result);
}

controller.syncUsers = async(req, res, next) => {
    const result = await userController.sync();
    res.send(result);
}

controller.updatePassword = async(req, res, next) => {
    let token = req.params.token;
	const id = await controller.getDataTokenPassword(token);
    const input = {'id': id, 'password': req.body.pass};
    res.send(await userController.updatePassword(input));
}

controller.userPoints = async(req, res, next) => {
    let cardCode = req.body.cardCode;
    const points = await getPoints(cardCode);
    const {err: errPH, data: _pointsHistory} = await service.pointsHistory(cardCode);
    const pointsHistory = (errPH) ? [] : _pointsHistory;
    return res.send({"points": points, "pointsHistory": pointsHistory});
}

const getPoints = async(cardCode) => {
    const {err: errP, data: _points} = await service.points(cardCode);
    if (!errP) return (_points.length > 0) ? _points[0].point : 0;
    helpers.showLog('OBTENER PUNTOS', errP);
    return 0;
}

module.exports = controller