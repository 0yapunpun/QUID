<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="shortcut icon" type="image/x-icon" href="http://104.236.159.193:8850/images/logoamigoinvesa.png"/>
  <title>
    Movimientos
  </title>
  <!-- Fonts and icons -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet" />
  <!-- Nucleo Icons -->
  <link href="../css/nucleo-icons.css" rel="stylesheet" />
  <link href="../css/nucleo-svg.css" rel="stylesheet" />
  <!-- Font Awesome Icons -->
  <script src="https://kit.fontawesome.com/42d5adcbca.js" crossorigin="anonymous"></script>
  <link href="/css/nucleo-svg.css" rel="stylesheet" />
  <!-- CSS Files -->
  <link id="pagestyle" href="/css/soft-ui-dashboard.css?v=1.0.3" rel="stylesheet" />
  <!-- Custom QUID classes -->
  <link id="pagestyle" href="/css/custom_classes.css" rel="stylesheet" />


  <style>
    #cardsContainer>div{
      width: 16%;
      transition: 0.3s;
    }
    #cardsContainer>div:hover{
      background-color: lightgrey;
    }
    #cardsContainer h4{
      font-size: 15px !important;
    }
  </style>
</head>

<body class="g-sidenav-show bg-gray-100">

  <!-- Menu -->
  <%- include('./partials/menu.ejs') %>

  <main class="main-content max-height-vh-100 h-100">

    <!-- Navbar -->
    <%- include('./partials/head.ejs') %>

    <!-- Cotent -->
    <div class="p-4 m-4">
      <div class="card flex-row p-3 my-2 justify-content-between align-items-center">
        <h6>Movimientos Por Fecha</h6>
        <input type="date" name=""  class="form-control" style="width: 150px" id="dateField" onchange="loadDataByDate($(this).val());"/>
      </div>

      <div id="cardsContainer" class="d-flex gap-1"><!-- Contenido Dinamico --></div>

      <div id="chartsContainer"></div>
    </div>
      
  </main>

  <!-- Preloader -->
  <div id="preloader" style="display: none;">
    <div>
      <div class="spinner" style="width: 100px; height: 100px; margin-bottom: 10px;">
        <div class="double-bounce1"></div>
        <div class="double-bounce2"></div>
      </div>
      <h5 style="color: white;">Cargando Contenido ...</h5>
    </div>
  </div>

  <!--   Core JS Files   -->
  <script src="/js/core/popper.min.js"></script>
  <script src="/js/core/bootstrap.min.js"></script>
  <script src="/js/plugins/perfect-scrollbar.min.js"></script>
  <script src="/js/plugins/smooth-scrollbar.min.js"></script>
  <script src="/js/plugins/choices.min.js"></script>
  <!-- Kanban scripts -->
  <script src="/js/plugins/dragula/dragula.min.js"></script>
  <script src="/js/plugins/jkanban/jkanban.js"></script>
  <!-- Jquery -->
  <script src="/js/jquery.js"></script>
  <script src="/js/jquery-ui.min.js"></script>
  <!-- Underscore -->
  <script src="/js/underscore-min.js"></script>
  <!-- Script Plantilla -->
  <script src="/js/soft-ui-dashboard.min.js?v=1.0.3"></script>
  <!-- Chart JS -->
  <script src="/js/plugins/chartjs.min.js"></script>

  <script>
    const handleJSON = (s) => {
      if (s == null && s == "") { return }
      // Remove special characters
      s = s.replace(/\\n/g, "\\n")  
           .replace(/\\'/g, "\\'")
           .replace(/\\"/g, '\\"')
           .replace(/\\&/g, "\\&")
           .replace(/\\r/g, "\\r")
           .replace(/\\t/g, "\\t")
           .replace(/\\b/g, "\\b")
           .replace(/\\f/g, "\\f")
           .replace(/[\u0000-\u0019]+/g,"")
           .replace(/\n/g, "\\n");
           ; 
      // Remove New Lines
      return JSON.parse(s)
    }

    const loadCards = (data) =>{
      for (const x in data) {
        let color;
        switch (x) {
          case "clientes":
            color = "3f51b5"
            break;
          case "recomendaciones":
            color = "E91E63"
            break;
          case "fichas":
            color = "FE5621"
            break;
          case "capacitaciones":
            color = "6639B6"
            break;
          case "aportes":
            color = "FFC105"
            break;
          case "acompanamientos":
            color = "4CAF50"
            break;
        };

        let element = `
          <div class="card flex-fill" >
            <div class=" h-100">
              <div class="card-body p-3 d-flex justify-content-center align-items-center flex-column" style="cursor: pointer" >
                <div class="text-center">
                  <h2 style="color: #${color}"> <span>${data[x]}</span></h2>
                  <h4 style="text-transform: capitalize;">${x}</h4> 
                </div> 
                <div style="width: 100%; margin-top: 20px" >   
                  <div class="border-top d-flex justify-content-between" >   
                    <h6>Mes</h6>
                    <h6 class="opacity-7" id="mes${x}"></h6>
                  </div>
                  <div class="border-top d-flex justify-content-between" >   
                    <h6>Año</h6>
                    <h6 class="opacity-7" id="año${x}"></h6>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        $("#cardsContainer").append(element);
      }
    }

    const chartClients = (data) => {
      console.log(data)
      $("#mesclientes").html(data.mes)
      $("#añoclientes").html(data.ano)
      
      let element = `
        <div class="chart card p-3 mt-2 " >
          <h6 style="text-transform: capitalize">Clientes Registrados por mes</h6>
          <canvas id="clientes" class="chart-canvas" height="300"></canvas>
        </div>
      `;
      $("#chartsContainer").append(element)

      let monthsCli = [];
      let dataCli = [];
      for (let i = 0; i < data.cuenta.data.length; i++) {
        monthsCli.push(data.cuenta.data[i].name)
        dataCli.push(data.cuenta.data[i].y)
      }

      var clientes = document.getElementById("clientes").getContext("2d");
      new Chart(clientes, {
          type: "bar",
          data: {
          labels: monthsCli,
          datasets: [{
              label: "",
              weight: 5,
              borderWidth: 0,
              borderRadius: 4,
              backgroundColor: "#3F51B4",
              data: dataCli,
              fill: false
          }]
          }
      });
    }

    const chartRecomendation = (data) => {
      console.log(data)
      $("#mesrecomendaciones").html(data.mes)
      $("#añorecomendaciones").html(data.ano)
      
      $("#chartsContainer").html("")
      let element = `
        <div class="chart card p-3 mt-2 " >
          <h6 style="text-transform: capitalize">Recomendaciones Generadas por mes</h6>
          <canvas id="recomendaciones" class="chart-canvas" height="300"></canvas>
        </div>
      `;
      $("#chartsContainer").append(element)

      let monthsRE = [];
      let dataRE = [];
      for (let i = 0; i < data.cuenta.data.length; i++) {
        monthsRE.push(data.cuenta.data[i].name)
        dataRE.push(data.cuenta.data[i].y)
      }

      var recomendation = document.getElementById("recomendaciones").getContext("2d");
      new Chart(recomendation, {
          type: "bar",
          data: {
          labels: monthsRE,
          datasets: [{
              label: "",
              weight: 5,
              borderWidth: 0,
              borderRadius: 4,
              backgroundColor: "#E91E63",
              data: dataRE,
              fill: false
          }]
          }
      });
    }

    const chartFichas = (data) => {
      console.log(data)
      $("#mesfichas").html(data.mes)
      $("#añofichas").html(data.ano)
      
      let element = `
        <div class="chart card p-3 mt-2 " >
          <h6 style="text-transform: capitalize">Fichas Generadas por mes</h6>
          <canvas id="fichas" class="chart-canvas" height="300"></canvas>
        </div>
      `;
      $("#chartsContainer").append(element)

      let monthsFi = [];
      let dataFi = [];
      for (let i = 0; i < data.cuenta.data.length; i++) {
        monthsFi.push(data.cuenta.data[i].name)
        dataFi.push(data.cuenta.data[i].y)
      }

      var fichas = document.getElementById("fichas").getContext("2d");
      new Chart(fichas, {
          type: "bar",
          data: {
          labels: monthsFi,
          datasets: [{
              label: "",
              weight: 5,
              borderWidth: 0,
              borderRadius: 4,
              backgroundColor: "#FA5622",
              data: dataFi,
              fill: false
          }]
          }
      });
    }

    const chartCapacitaciones = (data) => {
      console.log(data)
      $("#mescapacitaciones").html(data.mes)
      $("#añocapacitaciones").html(data.ano)
      
      let element = `
        <div class="chart card p-3 mt-2 " >
          <h6 style="text-transform: capitalize">Capacitaciones Generadas por mes</h6>
          <canvas id="capacitaciones" class="chart-canvas" height="300"></canvas>
        </div>
      `;
      $("#chartsContainer").append(element)

      let monthsCap = [];
      let dataCap = [];
      for (let i = 0; i < data.cuenta.data.length; i++) {
        monthsCap.push(data.cuenta.data[i].name)
        dataCap.push(data.cuenta.data[i].y)
      }

      var capacitaciones = document.getElementById("capacitaciones").getContext("2d");
      new Chart(capacitaciones, {
          type: "bar",
          data: {
          labels: monthsCap,
          datasets: [{
              label: "",
              weight: 5,
              borderWidth: 0,
              borderRadius: 4,
              backgroundColor: "#6639B6",
              data: dataCap,
              fill: false
          }]
          }
      });
    }

    const chartAportes = (data) => {
      console.log(data)
      $("#mesaportes").html(data.mes)
      $("#añoaportes").html(data.ano)
      
      let element = `
        <div class="chart card p-3 mt-2 " >
          <h6 style="text-transform: capitalize">Aportes Generados por mes</h6>
          <canvas id="aportes" class="chart-canvas" height="300"></canvas>
        </div>
      `;
      $("#chartsContainer").append(element)

      let monthsApo = [];
      let dataApo = [];
      for (let i = 0; i < data.cuenta.data.length; i++) {
        monthsApo.push(data.cuenta.data[i].name)
        dataApo.push(data.cuenta.data[i].y)
      }

      var aportes = document.getElementById("aportes").getContext("2d");
      new Chart(aportes, {
          type: "bar",
          data: {
          labels: monthsApo,
          datasets: [{
              label: "",
              weight: 5,
              borderWidth: 0,
              borderRadius: 4,
              backgroundColor: "#FCC108",
              data: dataApo,
              fill: false
          }]
          }
      });
    }

    const chartAcompañamiento = (data) => {
      console.log(data)
      $("#mesacompañamiento").html(data.mes)
      $("#añoacompañamiento").html(data.ano)
      
      let element = `
        <div class="chart card p-3 mt-2 " >
          <h6 style="text-transform: capitalize">Acompañamientos Generados por mes</h6>
          <canvas id="acompañamineto" class="chart-canvas" height="300"></canvas>
        </div>
      `;
      $("#chartsContainer").append(element)

      let monthsAco = [];
      let dataAco = [];
      for (let i = 0; i < data.cuenta.data.length; i++) {
        monthsAco.push(data.cuenta.data[i].name)
        dataAco.push(data.cuenta.data[i].y)
      }

      var acompañamineto = document.getElementById("acompañamineto").getContext("2d");
      new Chart(acompañamineto, {
          type: "bar",
          data: {
          labels: monthsAco,
          datasets: [{
              label: "",
              weight: 5,
              borderWidth: 0,
              borderRadius: 4,
              backgroundColor: "#4CAF50",
              data: dataAco,
              fill: false
          }]
          }
      });
    };

    const loadDataByDate = (data) => {
      $("#preloader").show();

      fetch('/informes/movimientos/'+data)
      .then(res => res.json())
      .then(res => {
        $("#preloader").hide();

        recomendaciones = handleJSON(res.recomendaciones)
        chartRecomendation(recomendaciones.data.cuenta)

        clientes = handleJSON(res.clientes)
        chartClients(clientes.data.cuenta);

        ficha = handleJSON(res.ficha)
        chartFichas(ficha.data.cuenta);

        capacitaciones = handleJSON(res.capacitaciones)
        chartCapacitaciones(capacitaciones.data.cuenta);

        aporte = handleJSON(res.aporte)
        chartAportes(aporte.data.cuenta);

        acompañamiento = handleJSON(res.acompañamiento)
        chartAcompañamiento(acompañamiento.data.cuenta);
      })
      .catch(error => console.error(error));
    }

    var movimientos = '<%- data %>';
    movimientos = handleJSON(movimientos)

    var clientes = '<%- clientes %>';
    clientes = handleJSON(clientes)

    var recomendaciones = '<%- recomendaciones %>';
    recomendaciones = handleJSON(recomendaciones)

    var ficha = '<%- ficha %>';
    ficha = handleJSON(ficha)

    var capacitaciones = '<%- capacitaciones %>';
    capacitaciones = handleJSON(capacitaciones)

    var aporte = '<%- aporte %>'; 
    aporte = handleJSON(aporte)

    var acompañamiento = '<%- acompañamiento %>';
    acompañamiento = handleJSON(acompañamiento)
    
    $(document).ready(function () {
      loadCards(movimientos.data.cuenta);
      chartRecomendation(recomendaciones.data.cuenta);
      chartClients(clientes.data.cuenta);
      chartFichas(ficha.data.cuenta);
      chartCapacitaciones(capacitaciones.data.cuenta);
      chartAportes(aporte.data.cuenta);
      chartAcompañamiento(acompañamiento.data.cuenta);

      let currentDate = new Date();
      currentDate = currentDate.toISOString().substr(0, 10)
      $("#dateField").val(currentDate)
    })

  </script>

</body>
</html>